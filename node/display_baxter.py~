#!/usr/bin/env python

import code
from collections import deque
import time
import rospy
import tf2_ros
import baxter_interface
from baxter_interface import CHECK_VERSION
import rospy
import baxter_interface
import os
import sys
import argparse
import cv2
import cv_bridge
import threading
import stopthread
from sensor_msgs.msg import Image

BANNER = "WELCOME TO BAXTER"
DEFAULT_RATE = 10
DEFAULT_IMAGE = 'images/smile.png'


    def __init__(self):
        ''' Initializes the interface to Baxter. '''
        # initialize console variables
        self.image_timer = None
        self.exit = False
        
        # initialize the robot
        print("Initializing node... ")
        rospy.init_node("display_baxter")
        print("Getting robot state... ")
        
        def clean_shutdown():
            print("\nExiting...")
            if not init_state:
                print("Disabling robot...")
         rospy.on_shutdown(clean_shutdown)

        #starting position
        self.thread = stopthread.StopThread(lambda : self.control_loop())
        self.idle()
        self.thread.start()
        self.idle()

    def control_loop(self):
        while not rospy.is_shutdown():
            if self.exit:
                rospy.Shutdown()

            # STATE
           
            empty_queues = len(self.motion_queue) == 0 and len(self.image_queue) == 0
            self.image_queue_lock.release()
            # motion and image queues are released in case we need to add to them
            if empty_queues and len(self.state_queue) > 0:
                # pop state queue if image and state queues are empty/finished
                self.current_state = self.state_queue.popleft()
                # look for image data
                if 'image_mode' in self.current_state:
                    # load a csv file for images
                    if self.current_state['image_mode'] == 'csv_file':
                        self.load_image_file(self.current_state['image_filepath'])
                    # list of images with duration
                    elif self.current_state['image_mode'] == 'list':
                        for image in self.current_state['image_list']:
                            self.queue_image(image['filepath'], image['duration'])
                else:
                    self.current_state['image_mode'] = "idle"
                # look for position data                             
                if 'position_mode' in self.current_state:
                    # load a csv file for positions
                    if self.current_state['position_mode'] == 'csv_file':
                        self.load_position_file(self.current_state['position_file'])
                    # list of positions with duration
                    elif self.current_state['position_mode'] == 'list':
                        for motion in self.current_state['position_list']:
                            self.queue_motion(motion["duration"], motion["angles"])
                else:
                    self.current_state['position_mode'] = "idle"
            self.state_queue_lock.release()       

       
    
    def queue_image(self, new_image, duration):
        ''' Adds the image to a queue of images to be shown for a specified amount of time '''
        self.image_queue_lock.acquire()
        self.image_queue.append({'duration': int(duration), 'filepath': new_image })
        self.image_queue_lock.release()

    def send_image(self, path):
        """
        Send the image located at the specified path to the head
        display on Baxter.
        @param path: path to the image file to load and send
        """
        img = cv2.imread(path)
        msg = cv_bridge.CvBridge().cv2_to_imgmsg(img, encoding="bgr8")
        pub = rospy.Publisher('/robot/xdisplay', Image, latch=True, queue_size=1)
        pub.publish(msg)
        # Sleep to allow for image to be published.
        # removed by alice
        #rospy.sleep(1)

    
    def load_image_file(self, filename):
        with open(filename) as f:
            filelines = f.readlines()
            keys = filelines[0].rstrip('\n').split(',')
            for image_line in filelines[1:]:
                image_line = image_line.rstrip('\n')
                this_image_dict = {}
                image_pieces = image_line.split(',')
                for i in range(0,len(keys)):
                    this_image_dict[keys[i]] = image_pieces[i]
                self.queue_image(this_image_dict['filepath'], this_image_dict['duration'])
           
if __name__ == '__main__':
    baxter = BaxterInterface()
    baxter.interact()
    

